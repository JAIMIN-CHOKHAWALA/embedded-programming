
atmega8-spi-Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b1  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000525  00000000  00000000  00000709  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000255  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1f c0       	rjmp	.+62     	; 0x74 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define MISO 4
#define SCK 5

int main(void) {
	short int i = 8;
	DDRC = DDRD = 0xFF; 
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
  3c:	84 bb       	out	0x14, r24	; 20
	DDRB = (1 << MISO); // set MISO as output others as input
  3e:	80 e1       	ldi	r24, 0x10	; 16
  40:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE); // Enable SPI pin and MSTR -> 0 slave mode
  42:	80 e4       	ldi	r24, 0x40	; 64
  44:	8d b9       	out	0x0d, r24	; 13
#define MOSI 3
#define MISO 4
#define SCK 5

int main(void) {
	short int i = 8;
  46:	88 e0       	ldi	r24, 0x08	; 8
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__SREG__+0x11>
		PORTC = SPDR = i;
		while ((SPSR & (1 << SPIF)) == 0);
		PORTD = SPDR; // light PORTD according to received data
		_delay_ms(1000);
		--i;
		if (i < 0) i = 8;		
  4c:	88 e0       	ldi	r24, 0x08	; 8
  4e:	90 e0       	ldi	r25, 0x00	; 0
	DDRB = (1 << MISO); // set MISO as output others as input
	SPCR = (1 << SPE); // Enable SPI pin and MSTR -> 0 slave mode
	
    while (1) {
		// PORTC = SPDR = 0x02; // sending 0000 0010
		PORTC = SPDR = i;
  50:	8f b9       	out	0x0f, r24	; 15
  52:	85 bb       	out	0x15, r24	; 21
		while ((SPSR & (1 << SPIF)) == 0);
  54:	77 9b       	sbis	0x0e, 7	; 14
  56:	fe cf       	rjmp	.-4      	; 0x54 <__SREG__+0x15>
		PORTD = SPDR; // light PORTD according to received data
  58:	2f b1       	in	r18, 0x0f	; 15
  5a:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5c:	2f e3       	ldi	r18, 0x3F	; 63
  5e:	3d e0       	ldi	r19, 0x0D	; 13
  60:	43 e0       	ldi	r20, 0x03	; 3
  62:	21 50       	subi	r18, 0x01	; 1
  64:	30 40       	sbci	r19, 0x00	; 0
  66:	40 40       	sbci	r20, 0x00	; 0
  68:	e1 f7       	brne	.-8      	; 0x62 <__SREG__+0x23>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <__SREG__+0x2d>
  6c:	00 00       	nop
		_delay_ms(1000);
		--i;
  6e:	01 97       	sbiw	r24, 0x01	; 1
		if (i < 0) i = 8;		
  70:	7a f7       	brpl	.-34     	; 0x50 <__SREG__+0x11>
  72:	ec cf       	rjmp	.-40     	; 0x4c <__SREG__+0xd>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>
