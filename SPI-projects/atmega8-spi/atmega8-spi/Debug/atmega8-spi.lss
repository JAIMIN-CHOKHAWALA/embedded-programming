
atmega8-spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b1  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000525  00000000  00000000  0000071d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	28 c0       	rjmp	.+80     	; 0x86 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define MISO 4
#define SCK 5

int main(void) { 
	short int i = 0;
	DDRD = 0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	DDRC = DDRD;
  3c:	81 b3       	in	r24, 0x11	; 17
  3e:	84 bb       	out	0x14, r24	; 20
	
	DDRB = (1 << MOSI) | (1 << SS) | (1 << SCK); // set in/out of B where MISO is only input pin
  40:	8c e2       	ldi	r24, 0x2C	; 44
  42:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // SPE = spi enable->1 | MSTR = select master->1 | data rate (SPRO) = fosc / 16
  44:	81 e5       	ldi	r24, 0x51	; 81
  46:	8d b9       	out	0x0d, r24	; 13
#define MOSI 3
#define MISO 4
#define SCK 5

int main(void) { 
	short int i = 0;
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	04 c0       	rjmp	.+8      	; 0x56 <__SREG__+0x17>
	DDRB = (1 << MOSI) | (1 << SS) | (1 << SCK); // set in/out of B where MISO is only input pin
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // SPE = spi enable->1 | MSTR = select master->1 | data rate (SPRO) = fosc / 16
	
	
    while (1) {
		SPDR = i++;
  4e:	c9 01       	movw	r24, r18
  50:	02 c0       	rjmp	.+4      	; 0x56 <__SREG__+0x17>
		PORTC = SPDR;// sending 0000 0001 using SPDR
		while (!(SPSR & (1 << SPIF)));
		PORTD = SPDR; // Receiving data on PORTD
		_delay_ms(1000);
		if (i > 8) i = 0;
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
	DDRB = (1 << MOSI) | (1 << SS) | (1 << SCK); // set in/out of B where MISO is only input pin
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // SPE = spi enable->1 | MSTR = select master->1 | data rate (SPRO) = fosc / 16
	
	
    while (1) {
		SPDR = i++;
  56:	9c 01       	movw	r18, r24
  58:	2f 5f       	subi	r18, 0xFF	; 255
  5a:	3f 4f       	sbci	r19, 0xFF	; 255
  5c:	a9 01       	movw	r20, r18
  5e:	8f b9       	out	0x0f, r24	; 15
		PORTC = SPDR;// sending 0000 0001 using SPDR
  60:	8f b1       	in	r24, 0x0f	; 15
  62:	85 bb       	out	0x15, r24	; 21
		while (!(SPSR & (1 << SPIF)));
  64:	77 9b       	sbis	0x0e, 7	; 14
  66:	fe cf       	rjmp	.-4      	; 0x64 <__SREG__+0x25>
		PORTD = SPDR; // Receiving data on PORTD
  68:	8f b1       	in	r24, 0x0f	; 15
  6a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	6f e3       	ldi	r22, 0x3F	; 63
  6e:	8d e0       	ldi	r24, 0x0D	; 13
  70:	93 e0       	ldi	r25, 0x03	; 3
  72:	61 50       	subi	r22, 0x01	; 1
  74:	80 40       	sbci	r24, 0x00	; 0
  76:	90 40       	sbci	r25, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <__SREG__+0x33>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <__SREG__+0x3d>
  7c:	00 00       	nop
		_delay_ms(1000);
		if (i > 8) i = 0;
  7e:	49 30       	cpi	r20, 0x09	; 9
  80:	51 05       	cpc	r21, r1
  82:	3c f7       	brge	.-50     	; 0x52 <__SREG__+0x13>
  84:	e4 cf       	rjmp	.-56     	; 0x4e <__SREG__+0xf>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>
