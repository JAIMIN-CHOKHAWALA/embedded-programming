
spi-multi-testing-s2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cd  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000548  00000000  00000000  0000075d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a3  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define MISO 6

int main(void) {
    while (1) {
		 DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
		 DDRB = (1 << MISO); // set MISO as output others as input
  70:	80 e4       	ldi	r24, 0x40	; 64
  72:	87 bb       	out	0x17, r24	; 23
		 SPCR = (1 << SPE); // Enable SPI pin and MSTR -> 0 slave mode
  74:	8d b9       	out	0x0d, r24	; 13
		 short int i = 0;

		 
		 while (1) {
			 if (PORTC == 0x55 || PORTC == 0xAA) {
  76:	85 b3       	in	r24, 0x15	; 21
  78:	85 35       	cpi	r24, 0x55	; 85
  7a:	29 f0       	breq	.+10     	; 0x86 <main+0x1a>
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	8a 3a       	cpi	r24, 0xAA	; 170
  80:	21 f4       	brne	.+8      	; 0x8a <main+0x1e>
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	03 c0       	rjmp	.+6      	; 0x8c <main+0x20>
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <main+0x20>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	81 11       	cpse	r24, r1
				 i = 0;
				 PORTC = 0;
  8e:	15 ba       	out	0x15, r1	; 21
			 }
			 
			 // receiving 
			 while (!(SPSR & (1 << SPIF)));
  90:	77 9b       	sbis	0x0e, 7	; 14
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x24>
			 i = SPDR;
  94:	3f b1       	in	r19, 0x0f	; 15
			 PORTC |= MASK(i);
  96:	25 b3       	in	r18, 0x15	; 21
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	3a 95       	dec	r19
  a4:	e2 f7       	brpl	.-8      	; 0x9e <main+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	85 bb       	out	0x15, r24	; 21
		 DDRB = (1 << MISO); // set MISO as output others as input
		 SPCR = (1 << SPE); // Enable SPI pin and MSTR -> 0 slave mode
		 short int i = 0;

		 
		 while (1) {
  aa:	e5 cf       	rjmp	.-54     	; 0x76 <main+0xa>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
