
spi-multi-testing-mas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000679  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  00000829  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000289  00000000  00000000  00000e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z12toggleSlavesv>:
// pins 
#define SS_1 0
#define SS_2 1

void toggleSlaves () {
	PORTB ^= MASK(0);
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	89 27       	eor	r24, r25
  72:	88 bb       	out	0x18, r24	; 24
	PORTB ^= MASK(1);
  74:	98 b3       	in	r25, 0x18	; 24
  76:	82 e0       	ldi	r24, 0x02	; 2
  78:	89 27       	eor	r24, r25
  7a:	88 bb       	out	0x18, r24	; 24
  7c:	08 95       	ret

0000007e <main>:
}

int main(void) {
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS_1) | (1 << SS_2);
  7e:	83 ea       	ldi	r24, 0xA3	; 163
  80:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  82:	81 e5       	ldi	r24, 0x51	; 81
  84:	8d b9       	out	0x0d, r24	; 13
	DDRC = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
	PORTB &= ~MASK(0);
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	88 bb       	out	0x18, r24	; 24
	PORTB |= MASK(1);
  90:	88 b3       	in	r24, 0x18	; 24
  92:	82 60       	ori	r24, 0x02	; 2
  94:	88 bb       	out	0x18, r24	; 24
	short int i = 0;
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e3       	ldi	r18, 0x3F	; 63
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2c>
  aa:	00 00       	nop
	
    while (1) {
		_delay_ms(1000);
		if (i > 7) i = 0;
  ac:	c8 30       	cpi	r28, 0x08	; 8
  ae:	d1 05       	cpc	r29, r1
  b0:	14 f0       	brlt	.+4      	; 0xb6 <main+0x38>
  b2:	c0 e0       	ldi	r28, 0x00	; 0
  b4:	d0 e0       	ldi	r29, 0x00	; 0
		//sending
		SPDR = i;
  b6:	cf b9       	out	0x0f, r28	; 15
		while (!(SPSR & (1 << SPIF)));
  b8:	77 9b       	sbis	0x0e, 7	; 14
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <main+0x3a>
		
		toggleSlaves();
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <_Z12toggleSlavesv>
		++i;
  c0:	21 96       	adiw	r28, 0x01	; 1
	DDRC = 0xFF;
	PORTB &= ~MASK(0);
	PORTB |= MASK(1);
	short int i = 0;
	
    while (1) {
  c2:	eb cf       	rjmp	.-42     	; 0x9a <main+0x1c>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
