
atmega16-SPI-multi-master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005aa  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052e  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017b  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define SS_2 1
#define SS_3 2	

int main(void) {
	// switch	
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS_1) | (1 << SS_2) | (1 << SS_3); // SS_1 for channel-1 communication
  6c:	87 ea       	ldi	r24, 0xA7	; 167
  6e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF; // testing port
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20
	
	// 0000 0111 => 07
	PORTB |= 0x07; // all SS_1/2/3 are HIGH and working	
  74:	88 b3       	in	r24, 0x18	; 24
  76:	87 60       	ori	r24, 0x07	; 7
  78:	88 bb       	out	0x18, r24	; 24
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // SPE = spi enable->1 | MSTR = select master->1 | data rate (SPRO) = fosc / 16
  7a:	81 e5       	ldi	r24, 0x51	; 81
  7c:	8d b9       	out	0x0d, r24	; 13
		
    while (1) {
		// SPDR = 0x01; // 0000 0001
		while (!(SPSR & (1 << SPIF)));
  7e:	77 9b       	sbis	0x0e, 7	; 14
  80:	fe cf       	rjmp	.-4      	; 0x7e <main+0x12>
		PORTC = SPDR;
  82:	8f b1       	in	r24, 0x0f	; 15
  84:	85 bb       	out	0x15, r24	; 21
	
	// 0000 0111 => 07
	PORTB |= 0x07; // all SS_1/2/3 are HIGH and working	
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // SPE = spi enable->1 | MSTR = select master->1 | data rate (SPRO) = fosc / 16
		
    while (1) {
  86:	fb cf       	rjmp	.-10     	; 0x7e <main+0x12>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
