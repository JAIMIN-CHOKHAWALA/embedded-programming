
spi-testing-s1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067a  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z7patternv>:
#define MISO 6
#define SCK 7

void pattern () {
	short int i = 0;
	PORTC = MASK(0);
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	85 bb       	out	0x15, r24	; 21
#define MOSI 5
#define MISO 6
#define SCK 7

void pattern () {
	short int i = 0;
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	30 e0       	ldi	r19, 0x00	; 0
	PORTC = MASK(0);
	
	while (i <= 7) {
  74:	28 30       	cpi	r18, 0x08	; 8
  76:	31 05       	cpc	r19, r1
  78:	bc f4       	brge	.+46     	; 0xa8 <_Z7patternv+0x3c>
		PORTC |= MASK(i);	
  7a:	45 b3       	in	r20, 0x15	; 21
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	02 2e       	mov	r0, r18
  82:	02 c0       	rjmp	.+4      	; 0x88 <_Z7patternv+0x1c>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <_Z7patternv+0x18>
  8c:	84 2b       	or	r24, r20
  8e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	4f e9       	ldi	r20, 0x9F	; 159
  92:	86 e8       	ldi	r24, 0x86	; 134
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	41 50       	subi	r20, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <_Z7patternv+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_Z7patternv+0x34>
  a0:	00 00       	nop
		_delay_ms(500);
		++i;
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255

void pattern () {
	short int i = 0;
	PORTC = MASK(0);
	
	while (i <= 7) {
  a6:	e6 cf       	rjmp	.-52     	; 0x74 <_Z7patternv+0x8>
  a8:	08 95       	ret

000000aa <main>:
	}
	i = 0;
}

int main(void) {
	DDRC = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 bb       	out	0x14, r24	; 20
	DDRB = (1 << MISO); // set MISO as output others as input
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE); // Enable SPI pin and MSTR -> 0 slave mode
  b2:	8d b9       	out	0x0d, r24	; 13
	
    while (1) {
		while (!(SPSR & (1 << SPIF)));
  b4:	77 9b       	sbis	0x0e, 7	; 14
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0xa>
		if (SPDR == 'A') {
  b8:	8f b1       	in	r24, 0x0f	; 15
  ba:	81 34       	cpi	r24, 0x41	; 65
  bc:	d9 f7       	brne	.-10     	; 0xb4 <main+0xa>
			pattern();
  be:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7patternv>
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <main+0xa>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
