
timer0-normal-mode-no-prescalling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000585  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050e  00000000  00000000  00000709  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000199  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000113d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z7T0Delayv>:
#include <avr/io.h>
#define F_CPU 8000000UL
#define MASK(k) ((unsigned char)(1 << k))

void T0Delay () { // delay function generate 6.25 micro sec when called
	TCNT0 = 0x38; // 256-200 = 56 means every 0.1 sec as calculation
  6c:	88 e3       	ldi	r24, 0x38	; 56
  6e:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 0x01; // configure TIMER - normal mode | no pre-scalar
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	83 bf       	out	0x33, r24	; 51
	while ((TIFR & (1 << TOV0)) == 0); // TOV0 is 0 while NOT flagged otherwise -> 1 | this line stops the code for 6.25 u-sec 
  74:	08 b6       	in	r0, 0x38	; 56
  76:	00 fe       	sbrs	r0, 0
  78:	fd cf       	rjmp	.-6      	; 0x74 <_Z7T0Delayv+0x8>
	TCCR0 = 0; // stop timer 0;
  7a:	13 be       	out	0x33, r1	; 51
	TIFR = 0x01; // clear TOV0;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	88 bf       	out	0x38, r24	; 56
  80:	08 95       	ret

00000082 <main>:
}

int main(void) {
	// setup
	DDRB |= MASK(3); // B 3rd pin as O/P
  82:	87 b3       	in	r24, 0x17	; 23
  84:	88 60       	ori	r24, 0x08	; 8
  86:	87 bb       	out	0x17, r24	; 23
	while (1) {
		PORTB ^= MASK(3); // toggle PORTB 3rd pin every time this line runs
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	88 e0       	ldi	r24, 0x08	; 8
  8c:	89 27       	eor	r24, r25
  8e:	88 bb       	out	0x18, r24	; 24
		T0Delay();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7T0Delayv>
  94:	f9 cf       	rjmp	.-14     	; 0x88 <main+0x6>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
