
timer-normalmode-prescalling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000585  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050e  00000000  00000000  00000705  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000199  00000000  00000000  00000c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z9delay2Secv>:
#include <avr/io.h>
#define F_CPU 8000000UL
#define MASK(k) ((unsigned char)(1 << k))

void delay2Sec () {
	TCCR0 = 0x02;
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0xC0;
  70:	80 ec       	ldi	r24, 0xC0	; 192
  72:	82 bf       	out	0x32, r24	; 50
	while (TIFR & (1 << TOV0) == 0);
  74:	88 b7       	in	r24, 0x38	; 56
	TCCR0 = 0;
  76:	13 be       	out	0x33, r1	; 51
	TIFR = 0x01;
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	88 bf       	out	0x38, r24	; 56
  7c:	08 95       	ret

0000007e <main>:
}

int main(void) {
	DDRB |= MASK(3);
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	88 60       	ori	r24, 0x08	; 8
  82:	87 bb       	out	0x17, r24	; 23
	
    while (1) {
		PORTB ^= MASK(3);
  84:	98 b3       	in	r25, 0x18	; 24
  86:	88 e0       	ldi	r24, 0x08	; 8
  88:	89 27       	eor	r24, r25
  8a:	88 bb       	out	0x18, r24	; 24
		delay2Sec();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <_Z9delay2Secv>
  90:	f9 cf       	rjmp	.-14     	; 0x84 <main+0x6>

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
