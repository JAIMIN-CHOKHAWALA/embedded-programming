
first-SP-project-Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ba  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000070e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1d c0       	rjmp	.+58     	; 0x70 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#define F_CPU 1000000UL
#include <util/delay.h>

int main(void) {
	DDRD &= ~(1 << PIND0);//PORTD pin0 as INPUT
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	8e 7f       	andi	r24, 0xFE	; 254
  3c:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;//PORTC as OUTPUT
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	84 bb       	out	0x14, r24	; 20
	int UBRR_Value = 25; // 2400 baud rate
	UBRRH = (unsigned char) (UBRR_Value >> 8);
  42:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) UBRR_Value;
  44:	89 e1       	ldi	r24, 0x19	; 25
  46:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN);
  48:	88 e1       	ldi	r24, 0x18	; 24
  4a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << USBS) | (3 << UCSZ0);
  4c:	8e e0       	ldi	r24, 0x0E	; 14
  4e:	80 bd       	out	0x20, r24	; 32
	unsigned char receiveData;

	while (1) {
		while (!(UCSRA & (1 << RXC)));
  50:	5f 9b       	sbis	0x0b, 7	; 11
  52:	fe cf       	rjmp	.-4      	; 0x50 <__SREG__+0x11>
		receiveData = UDR;
  54:	8c b1       	in	r24, 0x0c	; 12
		if (receiveData == 0b11110000) {
  56:	80 3f       	cpi	r24, 0xF0	; 240
  58:	d9 f7       	brne	.-10     	; 0x50 <__SREG__+0x11>
			PORTC ^= (1 << PINC0);
  5a:	95 b3       	in	r25, 0x15	; 21
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	89 27       	eor	r24, r25
  60:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	87 ed       	ldi	r24, 0xD7	; 215
  64:	96 ed       	ldi	r25, 0xD6	; 214
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <__SREG__+0x27>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <__SREG__+0x2d>
  6c:	00 00       	nop
  6e:	f0 cf       	rjmp	.-32     	; 0x50 <__SREG__+0x11>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
