
first-SP-project-Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000076  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d7  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000556  00000000  00000000  00000737  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0a d0       	rcall	.+20     	; 0x48 <main>
  34:	1e c0       	rjmp	.+60     	; 0x72 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z12_uart_configv>:

void _uart_config () {
	
	int UBBRValue = (16000000 / (16 * 9600)) - 1 ;//AS described before setting baud rate
	//Put the upper part of the baud number here (bits 8 to 11)
	UBRRH = 0x00;
  38:	10 bc       	out	0x20, r1	; 32
	//Put the remaining part of the baud number here
	UBRRL = (unsigned char) UBBRValue;
  3a:	85 ec       	ldi	r24, 0xC5	; 197
  3c:	89 b9       	out	0x09, r24	; 9
	//Enable the receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
  3e:	88 e1       	ldi	r24, 0x18	; 24
  40:	8a b9       	out	0x0a, r24	; 10
	//Set 2 stop bits and data bit length is 8-bit
	UCSRC = (1 << USBS) | (3 << UCSZ0);
  42:	8e e0       	ldi	r24, 0x0E	; 14
  44:	80 bd       	out	0x20, r24	; 32
  46:	08 95       	ret

00000048 <main>:
	
}

int main(void) {
	DDRD |= 1 << PIND1;//pin1 of portD as OUTPUT
  48:	81 b3       	in	r24, 0x11	; 17
  4a:	82 60       	ori	r24, 0x02	; 2
  4c:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << PIND0);//pin0 of portD as INPUT
  4e:	81 b3       	in	r24, 0x11	; 17
  50:	8e 7f       	andi	r24, 0xFE	; 254
  52:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PIND0;
  54:	82 b3       	in	r24, 0x12	; 18
  56:	81 60       	ori	r24, 0x01	; 1
  58:	82 bb       	out	0x12, r24	; 18

	_uart_config();
  5a:	ee df       	rcall	.-36     	; 0x38 <_Z12_uart_configv>

	while (1) {
		if (PINC0 == 0) {
			while (!(UCSRA & (1 << UDRE)));
  5c:	5d 9b       	sbis	0x0b, 5	; 11
  5e:	fe cf       	rjmp	.-4      	; 0x5c <main+0x14>
			UDR = 0b11110000;//once transmitter is ready sent eight bit data
  60:	80 ef       	ldi	r24, 0xF0	; 240
  62:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	87 ed       	ldi	r24, 0xD7	; 215
  66:	96 ed       	ldi	r25, 0xD6	; 214
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <main+0x20>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <main+0x26>
  6e:	00 00       	nop
  70:	f5 cf       	rjmp	.-22     	; 0x5c <main+0x14>

00000072 <_exit>:
  72:	f8 94       	cli

00000074 <__stop_program>:
  74:	ff cf       	rjmp	.-2      	; 0x74 <__stop_program>
