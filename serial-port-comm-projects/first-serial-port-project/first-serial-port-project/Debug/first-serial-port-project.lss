
first-serial-port-project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ab  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052e  00000000  00000000  00000703  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000252  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1f c0       	rjmp	.+62     	; 0x74 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <util/delay.h>

#define MASK(k) ((unsigned char)(1 << k))

int main(void) {
	DDRD |= MASK(1); // pin1 of portD as OUTPUT (transmitter)
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	82 60       	ori	r24, 0x02	; 2
  3c:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~MASK(0); // pin0 of portD as INPUT (receiver)
  3e:	81 b3       	in	r24, 0x11	; 17
  40:	8e 7f       	andi	r24, 0xFE	; 254
  42:	81 bb       	out	0x11, r24	; 17
	
	PORTD |= MASK(0); // pin0 of portD is at TRUE
  44:	82 b3       	in	r24, 0x12	; 18
  46:	81 60       	ori	r24, 0x01	; 1
  48:	82 bb       	out	0x12, r24	; 18
	
	int	UBBRValue = 25; // 25 baud rate ~ 25bits/second
	
	UBRRH = (unsigned char)(UBBRValue >> 8);
  4a:	10 bc       	out	0x20, r1	; 32
	
	UBRRL = (unsigned char)(UBBRValue);
  4c:	89 e1       	ldi	r24, 0x19	; 25
  4e:	89 b9       	out	0x09, r24	; 9
	
	// NOW, enable receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
  50:	88 e1       	ldi	r24, 0x18	; 24
  52:	8a b9       	out	0x0a, r24	; 10
	
	// set 2 stop bits & data bits length is 8 bits
	UCSRC = (1 << USBS) | (3 << UCSZ0);
  54:	8e e0       	ldi	r24, 0x0E	; 14
  56:	80 bd       	out	0x20, r24	; 32
	
	while (1) {
		if (PINC == 0x00) {
  58:	83 b3       	in	r24, 0x13	; 19
  5a:	81 11       	cpse	r24, r1
  5c:	fd cf       	rjmp	.-6      	; 0x58 <__SREG__+0x19>
			while (!(UCSRA & (1 << UDRE)));
  5e:	5d 9b       	sbis	0x0b, 5	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <__SREG__+0x1f>
			UDR = 0xF0; // //once transmitter is ready sent eight bit data
  62:	80 ef       	ldi	r24, 0xF0	; 240
  64:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	83 e2       	ldi	r24, 0x23	; 35
  68:	94 ef       	ldi	r25, 0xF4	; 244
  6a:	01 97       	sbiw	r24, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <__SREG__+0x2b>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <__SREG__+0x31>
  70:	00 00       	nop
  72:	f2 cf       	rjmp	.-28     	; 0x58 <__SREG__+0x19>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>
